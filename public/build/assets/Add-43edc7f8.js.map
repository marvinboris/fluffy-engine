{"version":3,"file":"Add-43edc7f8.js","sources":["../../../resources/ts/src/containers/Backend/Manager/Projects/Add.jsx"],"sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { CustomInput } from 'reactstrap';\r\n\r\n// Components\r\nimport Save from '../../../../components/Backend/UI/Form/Save';\r\n\r\nimport Input from '../../../../components/UI/Input';\r\nimport { updateObject } from '../../../../shared/utility';\r\n\r\nimport actions from '../../../../store/actions/backend/projects';\r\nimport * as utility from '../utility';\r\n\r\nconst initialState = {\r\n    title: {},\r\n    description: {},\r\n    date: '',\r\n    experience_id: '',\r\n    technologies: [],\r\n    github: '',\r\n    link: '',\r\n\r\n    translate: import.meta.env.VITE_DEFAULT_LANG,\r\n\r\n    add: false,\r\n}\r\n\r\nclass Add extends Component {\r\n    state = { ...initialState, isMounted: false }\r\n\r\n    // Component methods\r\n    resetState = () => this.setState({ ...initialState })\r\n    saveAddHandler = () => utility.add.component.saveAddHandler(this.setState.bind(this), this.props)\r\n    inputChangeHandler = e => {\r\n        const { name, id, checked } = e.target;\r\n        if (name.includes('technologies_check')) {\r\n            let technologies = [...this.state.technologies];\r\n            const [, technology_id] = id.split('-');\r\n\r\n            if (checked) technologies.push(technology_id);\r\n            else technologies = technologies.filter(technology => +technology !== +technology_id);\r\n\r\n            return this.setState({ technologies });\r\n        }\r\n        return utility.add.component.inputChangeHandler(this.state, this.setState.bind(this))(e);\r\n    }\r\n\r\n    // Lifecycle methods\r\n    componentDidMount() { utility.add.lifecycle.componentDidMount(this.props, this.setState.bind(this)) }\r\n    componentDidUpdate(prevProps) { utility.add.lifecycle.componentDidUpdate('projects', 'project')(prevProps, this.props, this.state, this.setState.bind(this), this.resetState) }\r\n    componentWillUnmount() { this.props.reset() }\r\n    render() {\r\n        const {\r\n            content: {\r\n                cms: {\r\n                    pages: { backend: { pages: { projects: { form } } } }\r\n                },\r\n                languages\r\n            },\r\n            backend: { projects: { experiences = [], technologies: all_technologies = [] } },\r\n        } = this.props;\r\n        const { title, description, date, github, link, experience_id, translate, technologies } = this.state;\r\n        const lang = localStorage.getItem('backend_lang');\r\n\r\n        const languagesOptions = languages.map(language => <option key={JSON.stringify(language)} value={language.abbr}>{language.name}</option>);\r\n        const experiencesOptions = experiences.map(experience => updateObject(experience, { company: experience.company[lang] })).sort((a, b) => a.company.localeCompare(b.company)).map(experience => <option key={JSON.stringify(experience)} value={experience.id}>{experience.company}</option>);\r\n        const technologiesItems = all_technologies.sort((a, b) => a.name.localeCompare(b.name)).map(technology => {\r\n            const checked = technologies.find(t => +t === +technology.id) !== undefined;\r\n\r\n            return <div className='col-6 col-md-4 col-lg-3 col-xl-2' key={JSON.stringify(technology)}>\r\n                <CustomInput type=\"switch\" id={`technology-${technology.id}`} className=\"col-md-6\" checked={checked} name={`technologies_check[]`} onChange={this.inputChangeHandler} label={<span className=\"text-400\">{technology.name}</span>} />\r\n                {checked && <input type='hidden' name='technologies[]' defaultValue={+technology.id} />}\r\n            </div>\r\n        });\r\n\r\n        const content = <>\r\n            {this.props.edit && <input type=\"hidden\" name=\"_method\" defaultValue=\"PATCH\" />}\r\n\r\n            <div className='row'>\r\n                <div className=\"col-lg-9\">\r\n                    <div className=\"row\">\r\n                        {languages.map(l => <Fragment key={'language-' + l.abbr}>\r\n                            <Input type=\"text\" id={\"title-\" + l.abbr} className={\"col-12\" + (l.abbr === translate ? \"\" : \" d-none\")} onChange={this.inputChangeHandler} value={title[l.abbr]} name={\"title[\" + l.abbr + \"]\"} required label={form.title} />\r\n                            <Input type=\"textarea\" id={\"description-\" + l.abbr} className={\"col-12\" + (l.abbr === translate ? \"\" : \" d-none\")} onChange={this.inputChangeHandler} value={description[l.abbr]} name={\"description[\" + l.abbr + \"]\"} required label={form.description} />\r\n                        </Fragment>)}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <Input type=\"select\" name=\"translate\" label={form.language} onChange={this.inputChangeHandler} value={translate}>\r\n                        {languagesOptions}\r\n                    </Input>\r\n                </div>\r\n\r\n                <div className=\"col-12 mb-3\">\r\n                    <hr />\r\n                </div>\r\n\r\n                <div className=\"col-lg-9\">\r\n                    <div className='row'>\r\n                        <Input type=\"date\" className=\"col-lg-6\" onChange={this.inputChangeHandler} name=\"date\" value={date} required label={form.date} />\r\n                        <Input type=\"select\" className=\"col-lg-6\" name=\"experience_id\" label={form.experience} onChange={this.inputChangeHandler} required value={experience_id}>\r\n                            <option>{form.select_experience}</option>\r\n                            {experiencesOptions}\r\n                        </Input>\r\n                        <Input type=\"url\" className=\"col-12\" onChange={this.inputChangeHandler} name=\"github\" value={github} required label={form.github} />\r\n                        <Input type=\"url\" className=\"col-12\" onChange={this.inputChangeHandler} name=\"link\" value={link} required label={form.link} />\r\n                        <div className='form-group col-12'>\r\n                            <div className='technologies-title'>{form.technologies_title}</div>\r\n                            <div className='row'>{technologiesItems}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <Save edit={this.props.edit} saveAddHandler={this.saveAddHandler} />\r\n            </div>\r\n        </>;\r\n\r\n        return <utility.add.lifecycle.render className='Projects' props={this.props} state={this.state} resource={'projects'}>\r\n            {content}\r\n        </utility.add.lifecycle.render>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({ ...state });\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    get: id => dispatch(actions.show(id)),\r\n    info: () => dispatch(actions.info()),\r\n    post: data => dispatch(actions.post(data)),\r\n    patch: (id, data) => dispatch(actions.patch(id, data)),\r\n    reset: () => dispatch(actions.reset()),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Add));"],"names":["initialState","Add","Component","__publicField","utility.add","e","name","id","checked","technologies","technology_id","technology","prevProps","form","languages","experiences","all_technologies","title","description","date","github","link","experience_id","translate","lang","languagesOptions","language","experiencesOptions","experience","updateObject","a","b","jsx","technologiesItems","t","jsxs","CustomInput","content","Fragment","l","Input","Save","mapStateToProps","state","mapDispatchToProps","dispatch","actions","data","Add$1","withRouter","connect"],"mappings":"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"}